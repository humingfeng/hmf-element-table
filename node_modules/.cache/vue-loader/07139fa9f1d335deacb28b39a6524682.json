{"remainingRequest":"/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/src/components/hmf-table/hmf-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/src/components/hmf-table/hmf-table.vue","mtime":1560500925799},{"path":"/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/humingfeng/Documents/ideaWork/GitHub/lb-element-table-master/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport HmfColumn from './hmf-column'\nexport default {\n  props: {\n    column: Array,\n    data: Array,\n    spanMethod: Function,\n    pagination: {\n      type: Boolean,\n      default: false\n    },\n    paginationTop: {\n      type: String,\n      default: '15px'\n    },\n    paginationAlign: {\n      type: String,\n      default: 'right'\n    },\n    merge: Array\n  },\n  components: {\n    HmfColumn\n  },\n  data () {\n    return {\n      mergeLine: {},\n      mergeIndex: {}\n    }\n  },\n  created () {\n    this.getMergeArr(this.data, this.merge)\n  },\n  computed: {\n    dataLength () {\n      return this.data.length\n    }\n  },\n  methods: {\n    clearSelection () {\n      this.$refs.elTable.clearSelection()\n    },\n    toggleRowSelection (row, selected) {\n      this.$refs.elTable.toggleRowSelection(row, selected)\n    },\n    toggleAllSelection () {\n      this.$refs.elTable.toggleAllSelection()\n    },\n    toggleRowExpansion (row, expanded) {\n      this.$refs.elTable.toggleRowExpansion(row, expanded)\n    },\n    setCurrentRow (row) {\n      this.$refs.elTable.setCurrentRow(row)\n    },\n    clearSort () {\n      this.$refs.elTable.clearSort()\n    },\n    clearFilter (columnKey) {\n      this.$refs.elTable.clearFilter(columnKey)\n    },\n    doLayout () {\n      this.$refs.elTable.doLayout()\n    },\n    sort (prop, order) {\n      this.$refs.elTable.sort(prop, order)\n    },\n    paginationCurrentChange (val) {\n      this.$emit('p-current-change', val)\n    },\n    getMergeArr (tableData, merge) {\n      if (!merge) return\n      this.mergeLine = {}\n      this.mergeIndex = {}\n      merge.forEach((item, k) => {\n        tableData.forEach((data, i) => {\n          if (i === 0) {\n            this.mergeIndex[item] = this.mergeIndex[item] || []\n            this.mergeIndex[item].push(1)\n            this.mergeLine[item] = 0\n          } else {\n            if (data[item] === tableData[i - 1][item]) {\n              this.mergeIndex[item][this.mergeLine[item]] += 1\n              this.mergeIndex[item].push(0)\n            } else {\n              this.mergeIndex[item].push(1)\n              this.mergeLine[item] = i\n            }\n          }\n        })\n      })\n    },\n    mergeMethod ({ row, column, rowIndex, columnIndex }) {\n      const index = this.merge.indexOf(column.property)\n      if (index > -1) {\n        const _row = this.mergeIndex[this.merge[index]][rowIndex]\n        const _col = _row > 0 ? 1 : 0\n        return {\n          rowspan: _row,\n          colspan: _col\n        }\n      }\n    }\n  },\n  watch: {\n    merge () {\n      this.getMergeArr(this.data, this.merge)\n    },\n    dataLength () {\n      this.getMergeArr(this.data, this.merge)\n    }\n  }\n}\n\n",{"version":3,"sources":["hmf-table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"hmf-table.vue","sourceRoot":"src/components/hmf-table","sourcesContent":["/**\n     * Description:    java类作用描述\n     * Author:         胡铭锋\n     * CreateDate:     2019-06-14 16:27\n     * Version:        1.0\n     */\n<template>\n  <div class=\"hmf-table\">\n    <el-table ref=\"elTable\"\n      v-bind=\"$attrs\"\n      v-on=\"$listeners\"\n      :data=\"data\"\n      :span-method=\"this.merge ? this.mergeMethod : this.spanMethod\">\n      <hmf-column v-bind=\"$attrs\"\n        v-for=\"(item, index) in column\"\n        :key=\"index\"\n        :column=\"item\">\n      </hmf-column>\n    </el-table>\n    <el-pagination class=\"hmf-table-pagination\"\n      v-if=\"pagination\"\n      v-bind=\"$attrs\"\n      v-on=\"$listeners\"\n      @current-change=\"paginationCurrentChange\"\n      :style=\"{ 'margin-top': paginationTop, 'text-align': paginationAlign }\">\n    </el-pagination>\n  </div>\n</template>\n\n<script>\nimport HmfColumn from './hmf-column'\nexport default {\n  props: {\n    column: Array,\n    data: Array,\n    spanMethod: Function,\n    pagination: {\n      type: Boolean,\n      default: false\n    },\n    paginationTop: {\n      type: String,\n      default: '15px'\n    },\n    paginationAlign: {\n      type: String,\n      default: 'right'\n    },\n    merge: Array\n  },\n  components: {\n    HmfColumn\n  },\n  data () {\n    return {\n      mergeLine: {},\n      mergeIndex: {}\n    }\n  },\n  created () {\n    this.getMergeArr(this.data, this.merge)\n  },\n  computed: {\n    dataLength () {\n      return this.data.length\n    }\n  },\n  methods: {\n    clearSelection () {\n      this.$refs.elTable.clearSelection()\n    },\n    toggleRowSelection (row, selected) {\n      this.$refs.elTable.toggleRowSelection(row, selected)\n    },\n    toggleAllSelection () {\n      this.$refs.elTable.toggleAllSelection()\n    },\n    toggleRowExpansion (row, expanded) {\n      this.$refs.elTable.toggleRowExpansion(row, expanded)\n    },\n    setCurrentRow (row) {\n      this.$refs.elTable.setCurrentRow(row)\n    },\n    clearSort () {\n      this.$refs.elTable.clearSort()\n    },\n    clearFilter (columnKey) {\n      this.$refs.elTable.clearFilter(columnKey)\n    },\n    doLayout () {\n      this.$refs.elTable.doLayout()\n    },\n    sort (prop, order) {\n      this.$refs.elTable.sort(prop, order)\n    },\n    paginationCurrentChange (val) {\n      this.$emit('p-current-change', val)\n    },\n    getMergeArr (tableData, merge) {\n      if (!merge) return\n      this.mergeLine = {}\n      this.mergeIndex = {}\n      merge.forEach((item, k) => {\n        tableData.forEach((data, i) => {\n          if (i === 0) {\n            this.mergeIndex[item] = this.mergeIndex[item] || []\n            this.mergeIndex[item].push(1)\n            this.mergeLine[item] = 0\n          } else {\n            if (data[item] === tableData[i - 1][item]) {\n              this.mergeIndex[item][this.mergeLine[item]] += 1\n              this.mergeIndex[item].push(0)\n            } else {\n              this.mergeIndex[item].push(1)\n              this.mergeLine[item] = i\n            }\n          }\n        })\n      })\n    },\n    mergeMethod ({ row, column, rowIndex, columnIndex }) {\n      const index = this.merge.indexOf(column.property)\n      if (index > -1) {\n        const _row = this.mergeIndex[this.merge[index]][rowIndex]\n        const _col = _row > 0 ? 1 : 0\n        return {\n          rowspan: _row,\n          colspan: _col\n        }\n      }\n    }\n  },\n  watch: {\n    merge () {\n      this.getMergeArr(this.data, this.merge)\n    },\n    dataLength () {\n      this.getMergeArr(this.data, this.merge)\n    }\n  }\n}\n\n</script>\n"]}]}